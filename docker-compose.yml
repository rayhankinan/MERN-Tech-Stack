version: '3.8'
services:
  # GraphQL Service
  backend-app:
    build:
      context: ./server-side
      dockerfile: Dockerfile
    container_name: mern-backend-app
    restart: always
    environment:
      PORT: ${BACKEND_PORT}
      MONGO_USERNAME: ${MONGO_INITDB_USERNAME}
      MONGO_PASSWORD: ${MONGO_INITDB_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DATABASE: ${MONGO_INITDB_DATABASE}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_PORT: ${ELASTIC_PORT}
      JWT_SECRET: ${JWT_SECRET}
    hostname: mern-backend-app-service
    volumes:
      - ./server-side:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - db
      - cache
      - search

  # CDN Service
  cdn-app:
    build:
      context: ./content-delivery-network
      dockerfile: Dockerfile
    container_name: mern-cdn-app
    restart: always
    environment:
      PORT: ${CDN_PORT}
      MONGO_USERNAME: ${MONGO_INITDB_USERNAME}
      MONGO_PASSWORD: ${MONGO_INITDB_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DATABASE: ${MONGO_INITDB_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
    hostname: mern-cdn-app-service
    volumes:
      - ./content-delivery-network:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - db
      - cache

  # Nginx Service
  web-server:
    image: nginx:latest
    container_name: mern-web-server
    restart: always
    ports:
      - "80:80"
      - "443:443"
    hostname: mern-server-service
    volumes:
      - ./server-side:/app
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend-app

  # MongoDB Service
  db:
    image: mongo:latest
    container_name: mern-db
    restart: always
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    hostname: mern-db-service
    volumes:
      - db:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network

  db-manager:
    image: mongo-express:latest
    container_name: mern-db-manager
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_HOST}
      ME_CONFIG_MONGODB_PORT: ${MONGO_PORT}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_SITE_BASEURL: ${ME_CONFIG_SITE_BASEURL}
    hostname: mern-db-manager-service
    volumes:
      - ./mongo-express/config.js:/usr/lib/node_modules/mongo-express/config.js
    networks:
      - app-network
    depends_on:
      - db

  # Redis Service
  cache:
    image: redis:latest
    container_name: mern-cache
    restart: always
    hostname: mern-cache-service
    volumes:
      - cache:/data
    networks:
      - app-network

  # Elasticsearch Service
  search:
    image: elasticsearch:8.5.2
    container_name: mern-search
    restart: always
    hostname: mern-search-service
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      xpack.security.enabled: false
    volumes:
      - search:/usr/share/elasticsearch/data
    networks:
      - app-network

  search-manager:
    image: kibana:8.5.2
    container_name: mern-search-manager
    restart: always
    hostname: mern-search-manager-service
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - app-network
    depends_on:
      - search

  # logstash:
  #   image: logstash:8.5.2
  #   container_name: mern-logstash
  #   restart: always
  #   hostname: mern-logstash-service
  #   command: bash -c "bin/logstash-plugin install logstash-input-mongodb && bin/logstash -f /etc/logstash/conf.d/logstash.conf"
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx1g -Xms1g"
  #   volumes:
  #     - ./logstash/conf.d/logstash.conf:/etc/logstash/conf.d/logstash.conf
  #   networks:
  #     - app-network
  #   depends_on:
  #     - search
  #     - db

# Docker Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  db:
    driver: local
  cache:
    driver: local
  search:
    driver: local